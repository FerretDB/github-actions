---
name: "Setup Go"
description: "Installs Go, downloads project's Go modules, and restores build and golangci-lint caches"
inputs:
  cache-key:
    description: "First part of key for restoring cache."
    required: false
outputs:
  cache_week:
    description: "Cache week, a part of cache key."
    value: ${{ steps.run.outputs.cache_week }}

runs:
  using: "composite"
  steps:
    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: "1.23.4"
        cache: false

    - name: Run tool
      id: run
      run: go mod download; go run .
      working-directory: ${{ github.action_path }}
      shell: bash

    # There is no _documented_ way to detect Ubicloud; UBICLOUD_CACHE_URL works in practice for now.
    #
    # The output variable is required because env context does not contain variables inherited by the runner process,
    # so just env.UBICLOUD_CACHE_URL would not work.
    - name: Check for Ubicloud
      id: ubicloud
      run: echo YES=$UBICLOUD_CACHE_URL >> $GITHUB_OUTPUT
      shell: bash

    - name: Restore GitHub cache
      if: inputs.cache-key != '' && steps.ubicloud.outputs.YES == ''
      uses: actions/cache@v4
      with:
        path: ${{ steps.run.outputs.cache_path }}
        key: ${{ inputs.cache-key }}-${{ steps.run.outputs.cache_week }}-${{ hashFiles('**/go.mod') }}
        restore-keys: |
          ${{ inputs.cache-key }}-${{ steps.run.outputs.cache_week }}-

    - name: Restore Ubicloud cache
      if: inputs.cache-key != '' && steps.ubicloud.outputs.YES != ''
      uses: ubicloud/cache@v4
      with:
        path: ${{ steps.run.outputs.cache_path }}
        key: ${{ inputs.cache-key }}-${{ steps.run.outputs.cache_week }}-${{ hashFiles('**/go.mod') }}
        restore-keys: |
          ${{ inputs.cache-key }}-${{ steps.run.outputs.cache_week }}-

    # we don't want them on CI
    - name: Clean test and fuzz caches
      run: go clean -testcache -fuzzcache
      shell: bash
